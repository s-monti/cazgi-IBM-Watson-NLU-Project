{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","keys","this","props","emotions","map","emotion","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","data","sentimentLabel","label","style","color","fontSize","score","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wPAsBeA,G,kLAlBH,IAAD,OACP,OACE,8BACE,uBAAOC,UAAU,uBAAjB,SACE,gCACGC,OAAOC,KAAKC,KAAKC,MAAMC,UAAUC,KAAI,SAAAC,GAAO,OAC3C,+BACE,6BAAKA,IACL,6BAAK,EAAKH,MAAMC,SAASE,OAFlBA,gB,GAPIC,IAAMC,Y,gBC6GlBC,E,4MAzGbC,MAAQ,CACNC,UAAW,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cAC3CC,KAAM,OACNC,gBAAiB,GACjBC,WAAW,G,EAGbC,eAAiB,WACfC,SAASC,eAAe,aAAaC,MAAQ,GACrB,QAApB,EAAKX,MAAMK,MACb,EAAKO,SAAS,CACZX,UAAW,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cAC3CC,KAAM,OACNC,gBAAiB,GACjBC,WAAW,K,EAKjBM,cAAgB,WACdJ,SAASC,eAAe,aAAaC,MAAQ,GACrB,SAApB,EAAKX,MAAMK,MACb,EAAKO,SAAS,CACZX,UAAW,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cAC3CC,KAAM,MACNC,gBAAiB,GACjBC,WAAW,K,EAKjBO,yBAA2B,WACzB,EAAKF,SAAS,CAAEL,WAAW,IAC3B,IACIQ,EAAM,IAGRA,EADsB,QAApB,EAAKf,MAAMK,KACPU,EAAM,sBAAwBN,SAASC,eAAe,aAAaC,MAEnEI,EAAM,wBAA0BN,SAASC,eAAe,aAAaC,MAEvEK,IAAMC,IAAIF,GACZG,MAAK,SAACC,GAGR,IAAMZ,EAAYY,EAASC,KACrBC,EAAiBd,EAAUe,MAEjC,EAAKV,SAAS,CAAEN,gBAAiBe,IACjC,IAAIE,EAAQ,GAEVA,EADqB,aAAnBF,EACM,CAAEG,MAAO,QAASC,SAAU,IACR,aAAnBJ,EACD,CAAEG,MAAO,MAAOC,SAAU,IAE1B,CAAED,MAAO,SAAUC,SAAU,IAEvC,EAAKb,SAAS,CACZN,gBACE,uBAAOjB,UAAU,uBAAjB,SACE,gCACE,qBAAIkC,MAAOA,EAAX,UACE,6BAAKhB,EAAUe,QACf,6BAAKf,EAAUmB,qB,EAQ7BC,uBAAyB,WACvB,EAAKf,SAAS,CAAEL,WAAW,IAC3B,IACIQ,EAAM,IAERA,EADsB,QAApB,EAAKf,MAAMK,KACPU,EAAM,oBAAsBN,SAASC,eAAe,aAAaC,MAEjEI,EAAM,uBAAyBN,SAASC,eAAe,aAAaC,MAEtEK,IAAMC,IAAIF,GAEZG,MAAK,SAACC,GACR,EAAKP,SAAS,CAAEN,gBAAiB,cAAC,EAAD,CAAcZ,SAAUyB,EAASC,a,uDAMpE,OACE,sBAAK/B,UAAU,MAAf,UACE,wBAAQA,UAAU,eAAeuC,QAASpC,KAAKgB,eAA/C,kBACA,wBAAQnB,UAAU,eAAeuC,QAASpC,KAAKqB,cAA/C,iBACA,uBAAM,uBACLrB,KAAKQ,MAAMC,UACZ,uBACA,wBAAQZ,UAAU,cAAcuC,QAASpC,KAAKsB,yBAA9C,+BACA,wBAAQzB,UAAU,cAAcuC,QAASpC,KAAKmC,uBAA9C,6BACA,uBACCnC,KAAKQ,MAAMM,uB,GApGFT,IAAMC,WCMT+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAASC,eAAe,SAM1BmB,K","file":"static/js/main.fbc71191.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table className=\"table table-bordered\">\r\n          <tbody>\r\n            {Object.keys(this.props.emotions).map(emotion =>\r\n              <tr key={emotion}>\r\n                <td>{emotion}</td>\r\n                <td>{this.props.emotions[emotion]}</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default EmotionTable;\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\r\n    mode: \"text\",\r\n    sentimentOutput: [],\r\n    sentiment: true\r\n  }\r\n\r\n  renderTextArea = () => {\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if (this.state.mode === \"url\") {\r\n      this.setState({\r\n        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\r\n        mode: \"text\",\r\n        sentimentOutput: [],\r\n        sentiment: true\r\n      })\r\n    }\r\n  }\r\n\r\n  renderTextBox = () => {\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if (this.state.mode === \"text\") {\r\n      this.setState({\r\n        innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\r\n        mode: \"url\",\r\n        sentimentOutput: [],\r\n        sentiment: true\r\n      })\r\n    }\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({ sentiment: true });\r\n    let ret = \"\";\r\n    let url = \".\";\r\n\r\n    if (this.state.mode === \"url\") {\r\n      url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n    ret.then((response) => {\r\n\r\n      //Include code here to check the sentiment and fomrat the data accordingly\r\n      const sentiment = response.data;\r\n      const sentimentLabel = sentiment.label;\r\n\r\n      this.setState({ sentimentOutput: sentimentLabel });\r\n      let style = {};\r\n      if (sentimentLabel === \"positive\") {\r\n        style = { color: \"green\", fontSize: 20 }\r\n      } else if (sentimentLabel === \"negative\") {\r\n        style = { color: \"red\", fontSize: 20 }\r\n      } else {\r\n        style = { color: \"orange\", fontSize: 20 }\r\n      }\r\n      this.setState({\r\n        sentimentOutput:\r\n          <table className=\"table table-bordered\">\r\n            <tbody>\r\n              <tr style={style}>\r\n                <td>{sentiment.label}</td>\r\n                <td>{sentiment.score}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n      });\r\n    });\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n    this.setState({ sentiment: false });\r\n    let ret = \"\";\r\n    let url = \".\";\r\n    if (this.state.mode === \"url\") {\r\n      url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n\r\n    ret.then((response) => {\r\n      this.setState({ sentimentOutput: <EmotionTable emotions={response.data} /> });\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\r\n        <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\r\n        <br /><br />\r\n        {this.state.innercomp}\r\n        <br />\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br />\r\n        {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}